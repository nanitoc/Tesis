#this is for training DATA
import numpy as np
import matplotlib.pyplot as plt
import os
import cv2 
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D

DATADIR= "C:/Users/jerem/Desktop/JN_test1"
CATEGORIES = ["Alert" , "No Alert" ]

IMG_SIZE = 300          #size de la imagen



Training_data = []

def create_training_data():
    for category in CATEGORIES:
        class_num = CATEGORIES.index(category)
        path = os.path.join(DATADIR, category)   # path to Diaphorina or other Path
        for img in os.listdir(path):
                try:
                    img_array = cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)
                    new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
                    Training_data.append([new_array, class_num])
                except Exception as e:
                    pass


create_training_data()

print(len(Training_data))

import random

random.shuffle(Training_data)
#for sample in Training_data:
    #print(sample[1])

x = []
y = []

for features, label in Training_data:
    x.append(features)
    y.append(label)

x = np.array(x).reshape(-1,IMG_SIZE,IMG_SIZE,1)     #En caso de querer trabajar en RBG cambiar el ultimo 1 a 3
y = np.array(y)
#Para Guardar tu data entrenada
import pickle
pickle_out = open ("X.pickle","wb")
pickle.dump(x,pickle_out)
pickle_out.close()

pickle_out = open ("y.pickle","wb")
pickle.dump(y,pickle_out)
pickle_out.close()
########para volver a cargar
#pickle_in = open("x.pickle","rb")
#x = pickle.load(pickle_in)